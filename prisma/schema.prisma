datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model User {
  id        String   @id @default(uuid()) @db.Uuid
  email     String   @unique
  name      String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  lastActiveAt DateTime?

  authenticationProviders AuthenticationProvider[]

  spaces UserSpace[]

  collections Collection[]

  blocks Block[] @relation("BlockOwner")
}

model AuthenticationProvider {
  id         String @id @default(uuid()) @db.Uuid
  name       String
  providerId String

  user   User   @relation(fields: [userId], references: [id])
  userId String @db.Uuid

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Space {
  id                  String   @id @default(uuid()) @db.Uuid
  name                String
  domain              String?
  subdomain           String?
  defaultCollectionId String?  @db.Uuid
  createdAt           DateTime @default(now())
  updatedAt           DateTime @updatedAt

  users UserSpace[]

  collections Collection[]

  blocks Block[]
}

enum SpaceMembership {
  OWNER
  ADMIN
  MEMBER
}

model UserSpace {

  user   User   @relation(fields: [userId], references: [id])
  userId String @db.Uuid

  space   Space  @relation(fields: [spaceId], references: [id])
  spaceId String @db.Uuid

  role SpaceMembership

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@id([userId, spaceId])
}

model Collection {
  id   String @id @default(uuid()) @db.Uuid
  name String

  space   Space  @relation(fields: [spaceId], references: [id])
  spaceId String @db.Uuid

  createdBy   User   @relation(fields: [createdById], references: [id])
  createdById String @db.Uuid

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  blocks Block[]
}

model Block {
  id     String @id @default(uuid()) @db.Uuid
  rootId String @db.Uuid

  parentId String? @db.Uuid
  children String[]

  collection   Collection? @relation(fields: [collectionId], references: [id])
  collectionId String?     @db.Uuid

  space  Space  @relation(fields: [spaceId], references: [id])
  spaceId String @db.Uuid

  createdBy   User   @relation("BlockOwner", fields: [createdById], references: [id])
  createdById String @db.Uuid

  type String

  content Json?

  version Int

  lastViewedAt DateTime @default(now())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}
